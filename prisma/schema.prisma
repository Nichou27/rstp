// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String    @unique
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  directionId  Int?      @unique
  direction    Direction? @relation(fields: [directionId], references: [id])
  services     Service[]
  bookings     Booking[]
  reviews      Review[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Category {
  id Int @id @default(autoincrement())
  name String
  services Service[]
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  directionId Int?
  direction   Direction? @relation(fields: [directionId], references: [id])
  bookings    Booking[]
  reviews     Review[]
}


enum BookingState {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

model Booking {
  id Int @id @default(autoincrement())
  date DateTime
  state BookingState
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
  serviceId Int
  service Service @relation(fields: [serviceId], references: [id])
}

model Review {
  id Int @id @default(autoincrement())
  rating Int
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
  serviceId Int
  service Service @relation(fields: [serviceId], references: [id])
}

model Message {
  id Int @id @default(autoincrement())
  content String
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
  senderId Int
  sender User @relation("SentMessages", fields: [senderId], references: [id])
  recieverId Int
  reciever User @relation("ReceivedMessages", fields: [recieverId], references: [id])
}

model Country {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  states State[]
}

model State {
  id        Int     @id @default(autoincrement())
  name      String
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])
  zones     Zone[]
}

model Zone {
  id      Int     @id @default(autoincrement())
  name    String
  stateId Int
  state   State   @relation(fields: [stateId], references: [id])
  directions Direction[]
}

model Direction {
  id        Int     @id @default(autoincrement())
  street    String
  number    String
  zipCode   String
  notes     String?
  zoneId    Int
  zone      Zone    @relation(fields: [zoneId], references: [id])
  user      User?
  services  Service[]
}
