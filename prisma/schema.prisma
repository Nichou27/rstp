// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  email        String    @unique
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  directionId  String?   @unique
  direction    Direction? @relation(fields: [directionId], references: [id])
  services     Service[]
  bookings     Booking[]
  reviews      Review[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Category {
  id       String    @id @default(uuid())
  name     String
  services Service[]
}

model Service {
  id          String    @id @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  directionId String?
  direction   Direction? @relation(fields: [directionId], references: [id])
  bookings    Booking[]
  reviews     Review[]
}

enum BookingState {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

model Booking {
  id        String       @id @default(uuid())
  date      DateTime
  state     BookingState
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  serviceId String
  service   Service      @relation(fields: [serviceId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Country {
  id     String  @id @default(uuid())
  name   String  @unique
  states State[]
}

model State {
  id        String  @id @default(uuid())
  name      String
  countryId String
  country   Country @relation(fields: [countryId], references: [id])
  zones     Zone[]
}

model Zone {
  id         String      @id @default(uuid())
  name       String
  stateId    String
  state      State       @relation(fields: [stateId], references: [id])
  directions Direction[]
}

model Direction {
  id       String    @id @default(uuid())
  street   String
  number   String
  zipCode  String
  notes    String?
  zoneId   String
  zone     Zone      @relation(fields: [zoneId], references: [id])
  user     User?
  services Service[]
}